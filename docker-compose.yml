version: '3.8'

services:
  reverse-proxy:
    image: traefik:v2.2
    command:
      - '--api.insecure=true'
      - '--providers.docker'
      - '--providers.docker.exposedByDefault=false'
    ports:
      - '80:80'
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
  main:
    container_name: main
    build:
      context: ./server
      target: development
    volumes:
      - ./server:/usr/src/app
      - /usr/src/app/node_modules
    ports:
      - ${SERVER_PORT}:${SERVER_PORT}
      - 9229:9229
    command: >
      sh -c "npm install && npm run build && npm run seed:run && npm run start:dev"
    env_file:
      - ./server/.env
    networks:
      - webnet
    depends_on:
      - redis-server
      - postgres
  redis-server:
    image: redis
    command: ['redis-server', '/tmp/redis.conf']
    ports:
      - '6379:6379'
    volumes:
      - 'redisdata:/data'
      - ./server/redis.conf:/tmp/redis.conf
    networks:
      - webnet
  postgres:
    container_name: postgres
    image: postgres:12
    networks:
      - webnet
    environment:
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_USER: ${DB_USERNAME}
      POSTGRES_DB: ${DB_DATABASE_NAME}
      PG_DATA: /var/lib/postgresql/data
    ports:
      - 5432:5432
    volumes:
      - pgdata:/var/lib/postgresql/data
  client:
    build:
      context: ./client
    image: client # if we don't give image name, traefik won't create router ü§∑‚Äç‚ôÇÔ∏è
    expose:
      - '3000'
    ports:
      - '3000:3000'
    labels:
      - 'traefik.enable=true'
    volumes:
      - ./client:/app
      - /app/node_modules #avoid overwriting node_modules
    depends_on:
      - reverse-proxy
    command: npm run start

networks:
  webnet:
volumes:
  pgdata:
  redisdata:
